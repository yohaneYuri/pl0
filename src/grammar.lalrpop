use crate::token::{Token, LexicalError};
use crate::ast::*;
use crate::symbol_table::{Kind, SymbolTableBuilder};

use lalrpop_util::ErrorRecovery;

grammar<'table, 'err>(
	symbol_table: &'table mut SymbolTableBuilder,
	errors: &'err mut Vec<ErrorRecovery<usize, Token, LexicalError>>,
);

extern {
	type Location = usize;
	type Error = LexicalError;

	enum Token {
		"var" => Token::Var,
		"const" => Token::Const,
		"procedure" => Token::Procedure,
		"begin" => Token::Begin,
		"end" => Token::End,
		"odd" => Token::Odd,
		"if" => Token::If,
		"then" => Token::Then,
		"call" => Token::Call,
		"while" => Token::While,
		"do" => Token::Do,
		"read" => Token::Read,
		"write" => Token::Write,
		";" => Token::Semicolon,
		"." => Token::Dot,
		"," => Token::Comma,
		":=" => Token::ColonEqual,
		"=" => Token::Equal,
		"+" => Token::Plus,
		"-" => Token::Minus,
		"*" => Token::Star,
		"/" => Token::Slash,
		"(" => Token::LeftParenthese,
		")" => Token::RightParenthese,
		"#" => Token::Number,
		"<" => Token::LessThan,
		">" => Token::GreaterThan,
		"<=" => Token::LessEqualThan,
		">=" => Token::GreaterEqualThan,
		"identifier" => Token::Identifier(<String>),
		"integer" => Token::Integer(<isize>),
	}
}

RecoverError: () = ! => errors.push(<>);

pub Program: Program =
	<subprogram: Subprogram> "." => Program {<>};

pub Subprogram: Box<Subprogram> =
	<const_declaration: ConstDeclaration?>
	<var_declaration: VarDeclaration?>
	<procedure_definition: ProcedureDefinition?>
	<statement: Statement>
	=> Box::new(Subprogram {<>});

pub ConstDeclaration: ConstDeclaration =
	"const" <definition: ConstDefinition> <mut extra: ("," <ConstDefinition>)*> ";"
	=> ConstDeclaration { definitions: { 
		let mut output = vec![definition];
		output.append(&mut extra);

		output.iter()
			.for_each(|definition| symbol_table.add(
				definition.identifier.clone(),
				Kind::Const,
			));

		output
	}};

pub ConstDefinition: ConstDefinition =
	<identifier: "identifier"> "=" <integer: "integer"> => ConstDefinition {<>};

pub VarDeclaration: VarDeclaration =
	"var" <identifier: "identifier"> <mut extra: ("," <"identifier">)*> ";"
	=> VarDeclaration { identifiers: {
		let mut output = vec![identifier];
		output.append(&mut extra);

		output.iter()
			.for_each(|identifier| symbol_table.add(
				identifier.clone(),
				Kind::Var,
			));

		output
	}};

pub ProcedureDefinition: Box<ProcedureDefinition> =
	<header: ProcedureHeader>
	<subprogram: Subprogram>
	<definitions: (";" <ProcedureDefinition>)*> ";"
	=> {
		symbol_table.leave();
		Box::new(ProcedureDefinition {<>})
	};

pub ProcedureHeader: ProcedureHeader = "procedure" <identifier: "identifier"> ";"
	=> {
		symbol_table.add(<>.clone(), Kind::Procedure);
		symbol_table.enter();
		ProcedureHeader {<>}
	};

pub Statement: Box<Statement> = {
	AssignStatement => Box::new(Statement::Assign(<>)),
	ConditionStatement => {
		symbol_table.leave();
		Box::new(Statement::Condition(<>))
	},
	LoopStatement => {
		symbol_table.leave();
		Box::new(Statement::Loop(<>))
	},
	CallStatement => Box::new(Statement::Call(<>)),
	ReadStatement => Box::new(Statement::Read(<>)),
	WriteStatement => Box::new(Statement::Write(<>)),
	CompoundStatement => Box::new(Statement::Compound(<>)),
	NullStatement => Box::new(<>),
	RecoverError => Box::new(Statement::Error),
};

pub AssignStatement: AssignStatement =
	<identifier: "identifier"> ":=" <expression: Expression> => AssignStatement {<>};

pub CompoundStatement: CompoundStatement =
	"begin" <statement: Statement> <mut extra: (";" <Statement>)*> "end"
	=> CompoundStatement { statements: {
		let mut output = vec![statement];
		output.append(&mut extra);
		output
	}};

pub NullStatement: Statement = () => Statement::Null;

pub Condition: Condition = {
	Expression RelationalOperator Expression => Condition::Binary(<>),
	"odd" <Expression> => Condition::Odd(<>),
};

pub Expression: Box<Expression> = {
	<sign: Sign?> <item: Item> <pairs: (AddSubOperator Item)*> => Box::new(Expression::Valid {<>}),
	RecoverError => Box::new(Expression::Invalid),
};

pub Sign: Sign = {
	"+" => Sign::Positive,
	"-" => Sign::Negative,
};

pub Item: Item = <factor: Factor> <pairs: (MulDivOperator Factor)*> => Item {<>};

pub Factor: Factor = {
	"identifier" => Factor::Identifier(<>),
	"integer" => Factor::Integer(<>),
	"(" <Expression> ")" => Factor::Expression(<>),
};

pub AddSubOperator: AddSubOperator = {
	"+" => AddSubOperator::Add,
	"-" => AddSubOperator::Sub,
};

pub MulDivOperator: MulDivOperator = {
	"*" => MulDivOperator::Mul,
	"/" => MulDivOperator::Div,
};

pub RelationalOperator: RelationalOperator = {
	"=" => RelationalOperator::Equal,
	"#" => RelationalOperator::NotEqual,
	"<" => RelationalOperator::LessThan,
	"<=" => RelationalOperator::LessEqualThan,
	">" => RelationalOperator::GreaterThan,
	">=" => RelationalOperator::GreaterEqualThan,
};

pub ConditionStatement: ConditionStatement =
	"if" <condition: Condition> "then" <statement: Statement> => {
		symbol_table.enter();
		ConditionStatement {<>}
	};

pub CallStatement: CallStatement =
	"call" <procedure_identifier: "identifier"> => CallStatement {<>};

pub LoopStatement: LoopStatement =
	"while" <condition: Condition> "do" <statement: Statement> => {
		symbol_table.enter();
		LoopStatement {<>}
	};

pub ReadStatement: ReadStatement =
	"read" "(" <identifier: "identifier"> <mut extra: ("," <"identifier">)*> ")"
	=> ReadStatement { identifiers: {
		let mut output = vec![identifier];
		output.append(&mut extra);

		output
	}};

pub WriteStatement: WriteStatement =
	"write" "(" <expression: Expression> <mut extra: ("," <Expression>)*> ")"
	=> WriteStatement { expressions: {
		let mut output = vec![expression];
		output.append(&mut extra);

		output
	}};
